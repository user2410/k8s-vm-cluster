version: '3'

tasks:
  dist:
    desc: "Distribute encryption key to VMs"
    vars:
      MASTER_IP:
        sh: awk '/ master /{print $1}' ./machines.txt
      COMPONENTS: "admin kube-proxy kube-scheduler kube-controller-manager kube-api-server{{.WORKER_HOSTS}}"
    sources:
      - ./machines.txt
    status:
      - |
        # Check if ALL of the kubeconfig files exist
        for prefix in {{.COMPONENTS}}; do
          if [ ! -f "{{.KUBECONFIG_PATH}}/${prefix}.kubeconfig" ]; then
            exit 0  # File not found → skip it
          fi
        done
        exit 1  # All files found → run it
    cmds:
      # Copy kube-proxy kubeconfig files to each worker instance
      - |
        for i in $(seq 1 {{.WORKER_COUNT}}); do
          HOSTNAME="worker$i"
          WORKER_IP=$(awk -v hostname="$HOSTNAME" '$2 == hostname {print $1}' ./machines.txt)
          
          scp -i .vagrant/machines/$HOSTNAME/virtualbox/private_key {{.KUBECONFIG_PATH}}/kube-proxy.kubeconfig vagrant@$WORKER_IP:~/
        done
      # Copy kube-controller-manager and kube-scheduler kubeconfig files to master instance
      - |
        scp -i .vagrant/machines/master/virtualbox/private_key \ 
          {{.KUBECONFIG_PATH}}/admin.kubeconfig \
          {{.KUBECONFIG_PATH}}/kube-controller-manager.kubeconfig \
          {{.KUBECONFIG_PATH}}/kube-scheduler.kubeconfig \
          vagrant@{{.MASTER_IP}}:~/

  gen:all:
    desc: Generate kubeconfig files for Kubernetes components
    status:
      - |
        if command -v kubectl >/dev/null 2>&1; then
          exit 1
        fi
        exit 0
    cmds:
      - |
        for worker in {{.WORKER_HOSTS}}; do
          echo "Generating kubeconfig for $worker"
          kubectl config set-cluster {{.CLUSTER_NAME}} \
            --certificate-authority={{.CERT_PATH}}/ca.crt \
            --embed-certs=true \
            --server=https://master.kubernetes.local:6443 \
            --kubeconfig={{.KUBECONFIG_PATH}}/$worker.kubeconfig
          kubectl config set-credentials system:node:$worker \
            --client-certificate={{.CERT_PATH}}/$worker.crt \
            --client-key={{.CERT_PATH}}/$worker.key \
            --embed-certs=true \
            --kubeconfig={{.KUBECONFIG_PATH}}/$worker.kubeconfig
          kubectl config set-context default \
            --cluster={{.CLUSTER_NAME}} \
            --user=system:node:$worker \
            --kubeconfig={{.KUBECONFIG_PATH}}/$worker.kubeconfig
          kubectl config use-context default \
            --kubeconfig={{.KUBECONFIG_PATH}}/$worker.kubeconfig
        done
      
      - task: gen:single
        vars: { NAME: "kube-proxy", USER: "system:kube-proxy", CERT: "kube-proxy" }
      - task: gen:single
        vars: { NAME: "kube-controller-manager", USER: "system:kube-controller-manager", CERT: "kube-controller-manager" }
      - task: gen:single
        vars: { NAME: "kube-scheduler", USER: "system:kube-scheduler", CERT: "kube-scheduler" }
      - task: gen:single
        vars: { NAME: "admin", USER: "admin", CERT: "admin" }

  gen:single:
    internal: true
    vars:
      NAME: '{{.NAME}}'
      USER: '{{.USER}}'
      CERT: '{{.CERT}}'
      KUBECONFIG_PATH: '{{.KUBECONFIG_PATH}}/{{.NAME}}.kubeconfig'
    status:
      - test -f {{.KUBECONFIG_PATH}}
    cmds:
      - |
        echo "Generating kubeconfig for {{.NAME}}"
        kubectl config set-cluster {{.CLUSTER_NAME}} \
          --certificate-authority={{.CERT_PATH}}/ca.crt \
          --embed-certs=true \
          --server=https://master.kubernetes.local:6443 \
          --kubeconfig={{.KUBECONFIG_PATH}}
        kubectl config set-credentials {{.USER}} \
          --client-certificate={{.CERT_PATH}}/{{.CERT}}.crt \
          --client-key={{.CERT_PATH}}/{{.CERT}}.key \
          --embed-certs=true \
          --kubeconfig={{.KUBECONFIG_PATH}}
        kubectl config set-context default \
          --cluster={{.CLUSTER_NAME}} \
          --user={{.USER}} \
          --kubeconfig={{.KUBECONFIG_PATH}}
        kubectl config use-context default \
          --kubeconfig={{.KUBECONFIG_PATH}}

  clean:
    desc: "Clean up kubeconfig files"
    cmds:
      - |
        echo "Cleaning up kubeconfig files..."
        rm -f {{.KUBECONFIG_PATH}}/*.kubeconfig
        echo "Kubeconfig files cleaned up."
