version: '3'

includes:
  kubeconfigs: kubeconfigs.taskfile.yml

tasks:
  dist:
    desc: "Distribute certificates to VMs"
    vars:
      WORKER_COUNT:
        sh: yq -r '.WorkerNodeCount' ./config.yaml
    sources:
      - ./machines.txt
    status:
      - |
        for prefix in admin worker1 worker2 kube-proxy kube-scheduler kube-controller-manager kube-api-server etcd service-accounts; do
          for ext in crt key; do
            if [ ! -f "./certs/${prefix}.${ext}" ]; then
              exit 0  # File not found → skip it
            fi
          done
        done
        exit 1  # All files exist → run it
    cmds:
      - for: ['worker1', 'worker2']
        cmd: |
          echo "Extracting variable..."
          WORKER_IP=$(grep '{{.ITEM}}' ./machines.txt | awk '{print $1}')
          echo "Extracted WORKER_IP: $WORKER_IP"

          scp -i .vagrant/machines/{{.ITEM}}/virtualbox/private_key \
            certs/ca.crt certs/ca.key certs/kube-apiserver.key certs/kube-apiserver.crt \
            certs/apiserver-kubelet-client.crt certs/apiserver-kubelet-client.key \
            certs/service-account.key certs/service-account.crt \
            certs/etcd-server.key certs/etcd-server.crt \
            certs/kube-controller-manager.key certs/kube-controller-manager.crt \
            certs/kube-scheduler.key certs/kube-scheduler.crt \
            vagrant@$WORKER_IP:~/

  gen:all:
    desc: "Generate CA and certificates for Kubernetes components"
    sources:
      - ./machines.txt
    status:
      - |
        if command -v yq >/dev/null 2>&1; then
          exit 1
        fi
        exit 0
      - |
        if [ ! -f "./machines.txt" ]; then
          exit 1
        fi
        exit 0
      - |
        # Check if ANY of the cert files exist
        for prefix in admin worker1 worker2 kube-proxy kube-scheduler kube-controller-manager kube-api-server etcd service-accounts; do
          for ext in crt key csr; do
            if [ -f "./certs/${prefix}.${ext}" ]; then
              exit 0  # File found → task is up to date → skip it
            fi
          done
        done
        exit 1  # No files found → task is stale → run it
    cmds:
      - |
        echo "Extracting variables..."
        MASTER_IP=$(grep 'master' ./machines.txt | awk '{print $1}')
        POD_NETWORK_CIDR=$(yq '.master.pod_network_cidr' config.yaml)
        FIRST_IP=$(echo $POD_NETWORK_CIDR | cut -d '.' -f 1-3).1
        echo "Extracted MASTER_IP: $MASTER_IP"
        echo "Extracted POD_NETWORK_CIDR: $POD_NETWORK_CIDR"

        echo "Generating certificates config file..."
        sed -e "s/{MASTER_IP}/$MASTER_IP/g" -e "s/{POD_CIDR_FIRST_IP}/$FIRST_IP/g" ca.conf > /tmp/ca.conf
        
      - |
        echo "# Create CA on Host"
        echo "## Create the CA Private Key"
        openssl genrsa -out "./certs/ca.key" 4096

        echo "## Generate the CA Self-Signed Certificate"
        openssl req -x509 -new -sha512 -noenc \
            -key "./certs/ca.key" -days 3653 \
            -config "/tmp/ca.conf" \
            -out "./certs/ca.crt"

      - task: gen:single
        vars: { COMPONENT: "admin" }
      - task: gen:single
        vars: { COMPONENT: "worker1" }
      - task: gen:single
        vars: { COMPONENT: "worker2" }
      - task: gen:single
        vars: { COMPONENT: "kube-proxy" }
      - task: gen:single
        vars: { COMPONENT: "kube-scheduler" }
      - task: gen:single
        vars: { COMPONENT: "kube-controller-manager" }
      - task: gen:single
        vars: { COMPONENT: "kube-api-server" }
      - task: gen:single
        vars: { COMPONENT: "service-accounts" }
      - task: kubeconfigs:gen:all
  
  gen:single:
    internal: true
    vars:
      COMPONENT: '{{.COMPONENT}}'
    cmds:
      - |
        echo "# Create certificates for {{.COMPONENT}}"
        openssl genrsa -out "./certs/{{.COMPONENT}}.key" 4096

        openssl req -new -key "./certs/{{.COMPONENT}}.key" -sha256 \
          -config "/tmp/ca.conf" -section {{.COMPONENT}} \
          -out "./certs/{{.COMPONENT}}.csr"

        openssl x509 -req -days 3653 -in "./certs/{{.COMPONENT}}.csr" \
          -copy_extensions copyall \
          -sha256 -CA "./certs/ca.crt" \
          -CAkey "./certs/ca.key" \
          -CAcreateserial \
          -out "./certs/{{.COMPONENT}}.crt"

  clean:
    desc: "Clean up generated certificates"
    cmds:
      - |
        echo "Cleaning up certificates..."
        rm -f ./certs/*.key ./certs/*.crt ./certs/*.csr ./certs/ca.key ./certs/ca.crt ./certs/ca.srl
        echo "Certificates cleaned up."
      - task: kubeconfigs:clean
