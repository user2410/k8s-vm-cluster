version: '3'

vars:
  # Global vars
  CERT_COMPONENTS: "admin kube-proxy kube-scheduler kube-controller-manager kube-api-server etcd service-accounts{{.WORKER_HOSTS}}"

includes:
  kubeconfigs: kubeconfigs.taskfile.yml

tasks:
  test:
    cmds:
      - echo "{{.CERT_COMPONENTS}}"

  dist:
    desc: "Distribute certificates to VMs"
    status:
      - |
        for prefix in {{.CERT_COMPONENTS}}; do
          for ext in crt key; do
            if [ ! -f "{{.CERT_PATH}}/${prefix}.${ext}" ]; then
              exit 0  # File not found → skip it
            fi
          done
        done
        exit 1  # All files exist → run it
    cmds:
      - |
        for i in $(seq 1 {{.WORKER_COUNT}}); do
          HOSTNAME="worker$i"
          echo "Copying certificates to each worker instance"
          WORKER_IP=$(awk -v idx=$i '$2 == "worker"idx {print $1}' ./machines.txt)

          scp -i .vagrant/machines/$HOSTNAME/virtualbox/private_key \
            certs/ca.crt certs/ca.key certs/kube-apiserver.key certs/kube-apiserver.crt \
            certs/apiserver-kubelet-client.crt certs/apiserver-kubelet-client.key \
            certs/service-account.key certs/service-account.crt \
            certs/etcd-server.key certs/etcd-server.crt \
            certs/kube-controller-manager.key certs/kube-controller-manager.crt \
            certs/kube-scheduler.key certs/kube-scheduler.crt \
            vagrant@$WORKER_IP:~/
        done

  gen:
    desc: "Generate CA and certificates for Kubernetes components"
    
    status:
      - test -f ./machines.txt
      - |
        # Check if ANY of the cert files exist
        for prefix in {{.CERT_COMPONENTS}}; do
          for ext in crt key csr; do
            if [ -f "{{.CERT_PATH}}/${prefix}.${ext}" ]; then
              exit 0  # File found → task is up to date → skip it
            fi
          done
        done
        exit 1  # No files found → task is stale → run it
    cmds:
      - |
        echo "Extracting variables..."
        MASTER_IP=$(grep 'master' ./machines.txt | awk '{print $1}')
        POD_NETWORK_CIDR=$(yq '.master.pod_network_cidr' config.yaml)
        FIRST_IP=$(echo $POD_NETWORK_CIDR | cut -d '.' -f 1-3).1
        echo "Extracted MASTER_IP: $MASTER_IP"
        echo "Extracted POD_NETWORK_CIDR: $POD_NETWORK_CIDR"

        echo "Generating certificates config file..."
        sed -e "s/{MASTER_IP}/$MASTER_IP/g" -e "s/{POD_CIDR_FIRST_IP}/$FIRST_IP/g" ca.conf > /tmp/ca.conf
        
      - |
        echo "# Create CA on Host"
        echo "## Create the CA Private Key"
        openssl genrsa -out "{{.CERT_PATH}}/ca.key" 4096

        echo "## Generate the CA Self-Signed Certificate"
        openssl req -x509 -new -sha512 -noenc \
            -key "{{.CERT_PATH}}/ca.key" -days 3653 \
            -config "/tmp/ca.conf" \
            -out "{{.CERT_PATH}}/ca.crt"
      
      - |
        for component in {{.CERT_COMPONENTS}}; do
          echo "# Create certificates for $component"
          openssl genrsa -out "{{.CERT_PATH}}/$component.key" 4096

          openssl req -new -key "{{.CERT_PATH}}/$component.key" -sha256 \
            -config "/tmp/ca.conf" -section $component \
            -out "{{.CERT_PATH}}/$component.csr"

          openssl x509 -req -days 3653 -in "{{.CERT_PATH}}/$component.csr" \
            -copy_extensions copyall \
            -sha256 -CA "{{.CERT_PATH}}/ca.crt" \
            -CAkey "{{.CERT_PATH}}/ca.key" \
            -CAcreateserial \
            -out "{{.CERT_PATH}}/$component.crt"
        done

      - task: kubeconfigs:gen:all

  clean:
    desc: "Clean up generated certificates"
    cmds:
      - |
        echo "Cleaning up certificates..."
        rm -f {{.CERT_PATH}}/*.key {{.CERT_PATH}}/*.crt {{.CERT_PATH}}/*.csr {{.CERT_PATH}}/ca.key {{.CERT_PATH}}/ca.crt {{.CERT_PATH}}/ca.srl
        echo "Certificates cleaned up."
      - task: kubeconfigs:clean
